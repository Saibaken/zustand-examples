"use client";

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { usePersistStore } from "@/stores/usePersistStore";

import { useEffect, useState } from "react";
import { useShallow } from "zustand/shallow";

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
function ThemeDisplay() {
  const theme = usePersistStore(useShallow((state) => state.theme));

  return (
    <div
      className={`p-8 border-4 ${
        theme === "dark"
          ? "border-slate-600 bg-slate-800 text-white"
          : "border-yellow-400 bg-yellow-50 text-black"
      } rounded-lg`}
    >
      <h2 className="text-xl font-bold mb-4">–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞</h2>
      <div className="flex items-center justify-center p-6 rounded-lg bg-opacity-20 backdrop-blur-sm">
        <div
          className={`text-4xl font-bold ${
            theme === "dark" ? "text-blue-400" : "text-orange-500"
          }`}
        >
          {theme === "dark" ? "–¢–µ–º–Ω–∞—è —Ç–µ–º–∞ üåô" : "–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ ‚òÄÔ∏è"}
        </div>
      </div>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function UserSettings() {
  const [settings, toggleSetting] = usePersistStore(
    useShallow((state) => [state.settings, state.toggleSetting])
  );

  return (
    <div className="p-8 border-4 border-purple-600 rounded-lg bg-purple-50 text-black">
      <h2 className="text-xl font-bold mb-4">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h2>
      <div className="space-y-4">
        {Object.entries(settings).map(([key, value]) => (
          <div
            key={key}
            className="flex items-center justify-between p-3 bg-white rounded-lg shadow"
          >
            <Label htmlFor={key} className="text-lg capitalize">
              {key === "notifications"
                ? "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                : key === "sounds"
                ? "–ó–≤—É–∫–∏"
                : key}
            </Label>
            <div className="flex items-center gap-2">
              <Switch
                id={key}
                checked={value}
                onCheckedChange={() => toggleSetting(key)}
              />
              <span
                className={`px-2 py-1 rounded text-xs font-semibold ${
                  value ? "bg-green-500 text-white" : "bg-gray-300"
                }`}
              >
                {value ? "–í–∫–ª" : "–í—ã–∫–ª"}
              </span>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–æ–π –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
function SettingsControls() {
  const [newSettingName, setNewSettingName] = useState("");
  const [isPageLoaded, setIsPageLoaded] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç. –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∫–∞–∫ –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –≥–∏–¥—Ä–∞—Ü–∏–∏
  useEffect(() => {
    setIsPageLoaded(true);
  }, []);

  const [theme, toggleTheme, addSetting] = usePersistStore(
    useShallow((state) => [state.theme, state.toggleTheme, state.addSetting])
  );

  const handleAddSetting = () => {
    if (newSettingName.trim()) {
      addSetting(newSettingName.trim());
      setNewSettingName("");
    }
  };

  if (!isPageLoaded) {
    return (
      <div className="p-8 rounded-lg bg-gray-100 animate-pulse h-64"></div>
    );
  }

  return (
    <div className="p-8 border-4 border-cyan-600 rounded-lg bg-cyan-50 text-black">
      <h2 className="text-xl font-bold mb-4">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏</h2>

      <div className="mb-6 p-4 bg-white rounded-lg shadow">
        <h3 className="font-medium mb-3">–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã:</h3>
        <Button
          onClick={toggleTheme}
          variant={theme === "dark" ? "default" : "secondary"}
          className="w-full"
        >
          –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ {theme === "dark" ? "—Å–≤–µ—Ç–ª—É—é" : "—Ç–µ–º–Ω—É—é"} —Ç–µ–º—É
        </Button>
      </div>

      <div className="p-4 bg-white rounded-lg shadow">
        <h3 className="font-medium mb-3">–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É:</h3>
        <div className="flex gap-2">
          <Input
            type="text"
            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
            value={newSettingName}
            onChange={(e) => setNewSettingName(e.target.value)}
            className="flex-grow"
          />
          <Button onClick={handleAddSetting}>–î–æ–±–∞–≤–∏—Ç—å</Button>
        </div>
      </div>
    </div>
  );
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
function LastSavedInfo() {
  const lastUpdated = usePersistStore((state) => state.lastUpdated);
  const history = usePersistStore((state) => state.history);

  return (
    <div className="p-4 bg-blue-50 border-4 border-blue-200 rounded-lg text-blue-800 overflow-scroll max-h-96">
      <h3 className="font-bold mb-1">–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:</h3>
      <div>
        {lastUpdated
          ? new Date(lastUpdated).toLocaleString()
          : "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏"}
      </div>
      <ol className="flex flex-col gap-2">
        {history.map((h) => (
          <li
            key={h.lastUpdated}
            className="border-2 p-2 border-blue-200 rounded-sm"
          >
            <p>–¢–µ–º–∞: {h.theme === "dark" ? "üåô" : "‚òÄÔ∏è"}</p>
            <p>
              –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:
              {`${new Date(h.lastUpdated || 0).toLocaleDateString()} ${new Date(
                h.lastUpdated || 0
              ).toLocaleTimeString()}`}
            </p>
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏:{" "}
            <ul className="text-xs">
              {Object.entries(h.settings).map(([k, v]) => (
                <p key={k}>
                  {k} -{" "}
                  {v ? (
                    <span className="bg-green-500 rounded-sm p-0.5 text-white">
                      true
                    </span>
                  ) : (
                    <span className="bg-red-500 rounded-sm p-0.5 text-white">
                      false
                    </span>
                  )}
                </p>
              ))}
            </ul>
          </li>
        ))}
      </ol>
    </div>
  );
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
export default function PersistPage() {
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) {
    return null;
  }

  return (
    <div className="w-full min-h-screen bg-slate-800 p-8">
      <h1 className="text-2xl font-bold mb-8 text-center text-white">
        –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Zustand —Å Persist middleware
      </h1>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 max-w-5xl mx-auto">
        <ThemeDisplay />
        <UserSettings />
        <SettingsControls />
        <LastSavedInfo />

        <div className="col-span-1 md:col-span-2 p-4 bg-yellow-100 text-yellow-800 rounded">
          <h3 className="font-bold mb-2">–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</h3>
          <ul className="list-disc list-inside space-y-1">
            <li>
              –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤
              localStorage
            </li>
            <li>
              Persist middleware —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π/–¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö
            </li>
            <li>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è createJSONStorage –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage</li>
            <li>
              –§—É–Ω–∫—Ü–∏—è partialize –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∏–µ —á–∞—Å—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å
              —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
            </li>
          </ul>
        </div>
      </div>
    </div>
  );
}
